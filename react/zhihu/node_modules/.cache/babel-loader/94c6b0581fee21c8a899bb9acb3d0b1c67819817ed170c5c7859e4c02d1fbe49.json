{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useEffect, useState } from 'react';\nimport { isObject } from '../utils';\nvar NetworkEventType;\n(function (NetworkEventType) {\n  NetworkEventType[\"ONLINE\"] = \"online\";\n  NetworkEventType[\"OFFLINE\"] = \"offline\";\n  NetworkEventType[\"CHANGE\"] = \"change\";\n})(NetworkEventType || (NetworkEventType = {}));\nfunction getConnection() {\n  var nav = navigator;\n  if (!isObject(nav)) return null;\n  return nav.connection || nav.mozConnection || nav.webkitConnection;\n}\nfunction getConnectionProperty() {\n  var c = getConnection();\n  if (!c) return {};\n  return {\n    rtt: c.rtt,\n    type: c.type,\n    saveData: c.saveData,\n    downlink: c.downlink,\n    downlinkMax: c.downlinkMax,\n    effectiveType: c.effectiveType\n  };\n}\nfunction useNetwork() {\n  var _a = __read(useState(function () {\n      return __assign({\n        since: undefined,\n        online: navigator === null || navigator === void 0 ? void 0 : navigator.onLine\n      }, getConnectionProperty());\n    }), 2),\n    state = _a[0],\n    setState = _a[1];\n  useEffect(function () {\n    var onOnline = function onOnline() {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          online: true,\n          since: new Date()\n        });\n      });\n    };\n    var onOffline = function onOffline() {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          online: false,\n          since: new Date()\n        });\n      });\n    };\n    var onConnectionChange = function onConnectionChange() {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), getConnectionProperty());\n      });\n    };\n    window.addEventListener(NetworkEventType.ONLINE, onOnline);\n    window.addEventListener(NetworkEventType.OFFLINE, onOffline);\n    var connection = getConnection();\n    connection === null || connection === void 0 ? void 0 : connection.addEventListener(NetworkEventType.CHANGE, onConnectionChange);\n    return function () {\n      window.removeEventListener(NetworkEventType.ONLINE, onOnline);\n      window.removeEventListener(NetworkEventType.OFFLINE, onOffline);\n      connection === null || connection === void 0 ? void 0 : connection.removeEventListener(NetworkEventType.CHANGE, onConnectionChange);\n    };\n  }, []);\n  return state;\n}\nexport default useNetwork;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}