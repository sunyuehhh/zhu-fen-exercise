{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useMemo } from 'react';\nimport useToggle from '../useToggle';\nexport default function useBoolean(defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = false;\n  }\n  var _a = __read(useToggle(defaultValue), 2),\n    state = _a[0],\n    _b = _a[1],\n    toggle = _b.toggle,\n    _set = _b.set;\n  var actions = useMemo(function () {\n    var setTrue = function setTrue() {\n      return _set(true);\n    };\n    var setFalse = function setFalse() {\n      return _set(false);\n    };\n    return {\n      toggle: toggle,\n      set: function set(v) {\n        return _set(!!v);\n      },\n      setTrue: setTrue,\n      setFalse: setFalse\n    };\n  }, []);\n  return [state, actions];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}