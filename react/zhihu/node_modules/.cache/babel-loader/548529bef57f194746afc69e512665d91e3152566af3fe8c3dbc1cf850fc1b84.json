{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nimport { isNumber } from '../utils';\nfunction getTargetValue(val, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var min = options.min,\n    max = options.max;\n  var target = val;\n  if (isNumber(max)) {\n    target = Math.min(max, target);\n  }\n  if (isNumber(min)) {\n    target = Math.max(min, target);\n  }\n  return target;\n}\nfunction useCounter(initialValue, options) {\n  if (initialValue === void 0) {\n    initialValue = 0;\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var min = options.min,\n    max = options.max;\n  var _a = __read(useState(function () {\n      return getTargetValue(initialValue, {\n        min: min,\n        max: max\n      });\n    }), 2),\n    current = _a[0],\n    setCurrent = _a[1];\n  var setValue = function setValue(value) {\n    setCurrent(function (c) {\n      var target = isNumber(value) ? value : value(c);\n      return getTargetValue(target, {\n        max: max,\n        min: min\n      });\n    });\n  };\n  var inc = function inc(delta) {\n    if (delta === void 0) {\n      delta = 1;\n    }\n    setValue(function (c) {\n      return c + delta;\n    });\n  };\n  var dec = function dec(delta) {\n    if (delta === void 0) {\n      delta = 1;\n    }\n    setValue(function (c) {\n      return c - delta;\n    });\n  };\n  var set = function set(value) {\n    setValue(value);\n  };\n  var reset = function reset() {\n    setValue(initialValue);\n  };\n  return [current, {\n    inc: useMemoizedFn(inc),\n    dec: useMemoizedFn(dec),\n    set: useMemoizedFn(set),\n    reset: useMemoizedFn(reset)\n  }];\n}\nexport default useCounter;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}