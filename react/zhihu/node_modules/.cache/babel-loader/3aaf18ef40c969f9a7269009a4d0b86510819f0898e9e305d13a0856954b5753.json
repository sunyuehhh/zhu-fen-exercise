{"ast":null,"code":"const delay = function () {\n  let interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(`@@${interval}`);\n    }, interval);\n  });\n};\n\n// // 需求:串行请求，有三个请求[请求需要的时间分别是1000/2000/3000]?\n// delay(1000).then(value=>{\n//   console.log('第一个请求成功',value)\n\n//   return delay(2000)\n// }).then(value=>{\n//   console.log('第二个请求成功',value)\n\n//   return delay(3000)\n// }).then(value=>{\n//   console.log('第三个执行成功',value)\n// }).catch(reason=>{\n//   console.log('仍和请求失败,都执行这里')\n// })\n\n// (async ()=>{\n//   try {\n//     let value=await delay(1000)\n//     console.log(value,'第一个请求成功')\n\n//     let value2=await delay(2000)\n//     console.log(value2,'第2个请求成功')\n\n//     let value3=await delay(3000)\n//     console.log(value3,'第3个请求成功')\n\n//   } catch (reason) {\n//     console.log('任何请求失败,都执行这里',reason)\n\n//   }\n// })()\n\nconst handle = function* handle() {\n  let value = yield delay(1000);\n  console.log(value, '第一个请求成功');\n  let value2 = yield delay(2000);\n  console.log(value2, '第2个请求成功');\n  let value3 = yield delay(3000);\n  console.log(value3, '第3个请求成功');\n};\n\n// let itor=handle()\n\nconst AsyncFunction = func;\nlet {\n  done,\n  value\n} = itor.next();\n// done:是否执行完毕  value:获取的是每一次yield后面的值[Promise实例]\nvalue.then(x => {\n  // x:第一个请求成功的结果\n  console.log(x, 'x');\n  let {\n    value,\n    done\n  } = itor.next(x);\n  value.then(x => {\n    let {\n      done,\n      value\n    } = itor.next(x);\n    value.then(x => {\n      itor.next(x);\n    });\n  });\n});","map":{"version":3,"names":["delay","interval","Promise","resolve","setTimeout","handle","value","console","log","value2","value3","AsyncFunction","func","done","itor","next","then","x"],"sources":["D:/xuexishipin/exercise/zhu-fen-exercise/react/zhihu/src/demo.js"],"sourcesContent":["const delay=(interval=1000)=>{\n  return new Promise(resolve=>{\n    setTimeout(()=>{\n      resolve(`@@${interval}`)\n    },interval)\n  })\n}\n\n\n// // 需求:串行请求，有三个请求[请求需要的时间分别是1000/2000/3000]?\n// delay(1000).then(value=>{\n//   console.log('第一个请求成功',value)\n\n//   return delay(2000)\n// }).then(value=>{\n//   console.log('第二个请求成功',value)\n\n//   return delay(3000)\n// }).then(value=>{\n//   console.log('第三个执行成功',value)\n// }).catch(reason=>{\n//   console.log('仍和请求失败,都执行这里')\n// })\n\n\n\n\n// (async ()=>{\n//   try {\n//     let value=await delay(1000)\n//     console.log(value,'第一个请求成功')\n\n//     let value2=await delay(2000)\n//     console.log(value2,'第2个请求成功')\n\n//     let value3=await delay(3000)\n//     console.log(value3,'第3个请求成功')\n    \n//   } catch (reason) {\n//     console.log('任何请求失败,都执行这里',reason)\n    \n//   }\n// })()\n\n\nconst handle=function* handle(){\n  let value=yield delay(1000)\n  console.log(value,'第一个请求成功')\n\n  let value2=yield delay(2000)\n  console.log(value2,'第2个请求成功')\n\n  let value3=yield delay(3000)\n  console.log(value3,'第3个请求成功')\n}\n\n// let itor=handle()\n\n\nconst AsyncFunction=func\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet {done,value}=itor.next()\n// done:是否执行完毕  value:获取的是每一次yield后面的值[Promise实例]\nvalue.then(x=>{\n  // x:第一个请求成功的结果\n  console.log(x,'x')\n  let {value,done}=itor.next(x)\n  value.then(x=>{\n    let {done,value}=itor.next(x)\n    value.then(x=>{\n      itor.next(x)\n    })\n  })\n})\n\n\n"],"mappings":"AAAA,MAAMA,KAAK,GAAC,YAAiB;EAAA,IAAhBC,QAAQ,uEAAC,IAAI;EACxB,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAE;IAC1BC,UAAU,CAAC,MAAI;MACbD,OAAO,CAAE,KAAIF,QAAS,EAAC,CAAC;IAC1B,CAAC,EAACA,QAAQ,CAAC;EACb,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA,MAAMI,MAAM,GAAC,UAAUA,MAAM,GAAE;EAC7B,IAAIC,KAAK,GAAC,MAAMN,KAAK,CAAC,IAAI,CAAC;EAC3BO,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,SAAS,CAAC;EAE5B,IAAIG,MAAM,GAAC,MAAMT,KAAK,CAAC,IAAI,CAAC;EAC5BO,OAAO,CAACC,GAAG,CAACC,MAAM,EAAC,SAAS,CAAC;EAE7B,IAAIC,MAAM,GAAC,MAAMV,KAAK,CAAC,IAAI,CAAC;EAC5BO,OAAO,CAACC,GAAG,CAACE,MAAM,EAAC,SAAS,CAAC;AAC/B,CAAC;;AAED;;AAGA,MAAMC,aAAa,GAACC,IAAI;AAcxB,IAAI;EAACC,IAAI;EAACP;AAAK,CAAC,GAACQ,IAAI,CAACC,IAAI,EAAE;AAC5B;AACAT,KAAK,CAACU,IAAI,CAACC,CAAC,IAAE;EACZ;EACAV,OAAO,CAACC,GAAG,CAACS,CAAC,EAAC,GAAG,CAAC;EAClB,IAAI;IAACX,KAAK;IAACO;EAAI,CAAC,GAACC,IAAI,CAACC,IAAI,CAACE,CAAC,CAAC;EAC7BX,KAAK,CAACU,IAAI,CAACC,CAAC,IAAE;IACZ,IAAI;MAACJ,IAAI;MAACP;IAAK,CAAC,GAACQ,IAAI,CAACC,IAAI,CAACE,CAAC,CAAC;IAC7BX,KAAK,CAACU,IAAI,CAACC,CAAC,IAAE;MACZH,IAAI,CAACC,IAAI,CAACE,CAAC,CAAC;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}