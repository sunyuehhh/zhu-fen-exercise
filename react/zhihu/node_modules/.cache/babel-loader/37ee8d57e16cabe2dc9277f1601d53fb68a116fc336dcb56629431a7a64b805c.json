{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React, { useRef, useState } from 'react';\nimport { AddOutline } from 'antd-mobile-icons';\nimport { mergeProps } from '../../utils/with-default-props';\nimport ImageViewer from '../image-viewer';\nimport PreviewItem from './preview-item';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useIsomorphicLayoutEffect, useUnmount } from 'ahooks';\nimport Space from '../space';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useConfig } from '../config-provider';\nconst classPrefix = `adm-image-uploader`;\nconst defaultProps = {\n  disableUpload: false,\n  deletable: true,\n  showUpload: true,\n  multiple: false,\n  maxCount: 0,\n  defaultValue: [],\n  accept: 'image/*',\n  preview: true,\n  showFailed: true,\n  imageFit: 'cover'\n};\nexport const ImageUploader = p => {\n  const {\n    locale\n  } = useConfig();\n  const props = mergeProps(defaultProps, p);\n  const [value, setValue] = usePropsValue(props);\n  const [tasks, setTasks] = useState([]);\n  useIsomorphicLayoutEffect(() => {\n    setTasks(prev => prev.filter(task => {\n      if (task.url === undefined) return true;\n      return !value.some(fileItem => fileItem.url === task.url);\n    }));\n  }, [value]);\n  useIsomorphicLayoutEffect(() => {\n    var _a;\n    (_a = props.onUploadQueueChange) === null || _a === void 0 ? void 0 : _a.call(props, tasks.map(item => ({\n      id: item.id,\n      status: item.status\n    })));\n  }, [tasks]);\n  const idCountRef = useRef(0);\n  const {\n    maxCount,\n    onPreview,\n    renderItem\n  } = props;\n  function processFile(file, fileList) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        beforeUpload\n      } = props;\n      let transformedFile = file;\n      transformedFile = yield beforeUpload === null || beforeUpload === void 0 ? void 0 : beforeUpload(file, fileList);\n      return transformedFile;\n    });\n  }\n  function getFinalTasks(tasks) {\n    return props.showFailed ? tasks : tasks.filter(task => task.status !== 'fail');\n  }\n  function onChange(e) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      e.persist();\n      const {\n        files: rawFiles\n      } = e.target;\n      if (!rawFiles) return;\n      let files = [].slice.call(rawFiles);\n      e.target.value = ''; // HACK: fix the same file doesn't trigger onChange\n      if (props.beforeUpload) {\n        const postFiles = files.map(file => {\n          return processFile(file, files);\n        });\n        yield Promise.all(postFiles).then(filesList => {\n          files = filesList.filter(Boolean);\n        });\n      }\n      if (files.length === 0) {\n        return;\n      }\n      if (maxCount > 0) {\n        const exceed = value.length + files.length - maxCount;\n        if (exceed > 0) {\n          files = files.slice(0, files.length - exceed);\n          (_a = props.onCountExceed) === null || _a === void 0 ? void 0 : _a.call(props, exceed);\n        }\n      }\n      const newTasks = files.map(file => ({\n        id: idCountRef.current++,\n        status: 'pending',\n        file\n      }));\n      setTasks(prev => [...getFinalTasks(prev), ...newTasks]);\n      yield Promise.all(newTasks.map(currentTask => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const result = yield props.upload(currentTask.file);\n          setTasks(prev => {\n            return prev.map(task => {\n              if (task.id === currentTask.id) {\n                return Object.assign(Object.assign({}, task), {\n                  status: 'success',\n                  url: result.url\n                });\n              }\n              return task;\n            });\n          });\n          setValue(prev => {\n            const newVal = Object.assign({}, result);\n            return [...prev, newVal];\n          });\n        } catch (e) {\n          setTasks(prev => {\n            return prev.map(task => {\n              if (task.id === currentTask.id) {\n                return Object.assign(Object.assign({}, task), {\n                  status: 'fail'\n                });\n              }\n              return task;\n            });\n          });\n          throw e;\n        }\n      }))).catch(error => console.error(error));\n    });\n  }\n  const imageViewerHandlerRef = useRef(null);\n  function previewImage(index) {\n    imageViewerHandlerRef.current = ImageViewer.Multi.show({\n      images: value.map(fileItem => fileItem.url),\n      defaultIndex: index,\n      onClose: () => {\n        imageViewerHandlerRef.current = null;\n      }\n    });\n  }\n  useUnmount(() => {\n    var _a;\n    (_a = imageViewerHandlerRef.current) === null || _a === void 0 ? void 0 : _a.close();\n  });\n  const finalTasks = getFinalTasks(tasks);\n  const showUpload = props.showUpload && (maxCount === 0 || value.length + finalTasks.length < maxCount);\n  const renderImages = () => {\n    return value.map((fileItem, index) => {\n      var _a, _b;\n      const originNode = React.createElement(PreviewItem, {\n        key: (_a = fileItem.key) !== null && _a !== void 0 ? _a : index,\n        url: (_b = fileItem.thumbnailUrl) !== null && _b !== void 0 ? _b : fileItem.url,\n        deletable: props.deletable,\n        imageFit: props.imageFit,\n        onClick: () => {\n          if (props.preview) {\n            previewImage(index);\n          }\n          onPreview && onPreview(index, fileItem);\n        },\n        onDelete: () => __awaiter(void 0, void 0, void 0, function* () {\n          var _c;\n          const canDelete = yield (_c = props.onDelete) === null || _c === void 0 ? void 0 : _c.call(props, fileItem);\n          if (canDelete === false) return;\n          setValue(value.filter((x, i) => i !== index));\n        })\n      });\n      return renderItem ? renderItem(originNode, fileItem, value) : originNode;\n    });\n  };\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(Space, {\n    className: `${classPrefix}-space`,\n    wrap: true,\n    block: true\n  }, renderImages(), finalTasks.map(task => {\n    return React.createElement(PreviewItem, {\n      key: task.id,\n      file: task.file,\n      deletable: task.status !== 'pending',\n      status: task.status,\n      imageFit: props.imageFit,\n      onDelete: () => {\n        setTasks(prev => prev.filter(x => x.id !== task.id));\n      }\n    });\n  }), showUpload && React.createElement(\"div\", {\n    className: `${classPrefix}-upload-button-wrap`\n  }, props.children ? props.children : React.createElement(\"span\", {\n    className: `${classPrefix}-cell ${classPrefix}-upload-button`,\n    role: 'button',\n    \"aria-label\": locale.ImageUploader.upload\n  }, React.createElement(\"span\", {\n    className: `${classPrefix}-upload-button-icon`\n  }, React.createElement(AddOutline, null))), !props.disableUpload && React.createElement(\"input\", {\n    capture: props.capture,\n    accept: props.accept,\n    multiple: props.multiple,\n    type: 'file',\n    className: `${classPrefix}-input`,\n    onChange: onChange,\n    \"aria-hidden\": true\n  })))));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}