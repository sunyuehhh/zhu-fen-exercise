{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useCallback, useState } from 'react';\nimport useUnmountedRef from '../useUnmountedRef';\nfunction useSafeState(initialState) {\n  var unmountedRef = useUnmountedRef();\n  var _a = __read(useState(initialState), 2),\n    state = _a[0],\n    setState = _a[1];\n  var setCurrentState = useCallback(function (currentState) {\n    /** if component is unmounted, stop update */\n    if (unmountedRef.current) return;\n    setState(currentState);\n  }, []);\n  return [state, setCurrentState];\n}\nexport default useSafeState;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}