{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nfunction useSet(initialValue) {\n  var getInitValue = function getInitValue() {\n    return initialValue === undefined ? new Set() : new Set(initialValue);\n  };\n  var _a = __read(useState(function () {\n      return getInitValue();\n    }), 2),\n    set = _a[0],\n    setSet = _a[1];\n  var add = function add(key) {\n    if (set.has(key)) {\n      return;\n    }\n    setSet(function (prevSet) {\n      var temp = new Set(prevSet);\n      temp.add(key);\n      return temp;\n    });\n  };\n  var remove = function remove(key) {\n    if (!set.has(key)) {\n      return;\n    }\n    setSet(function (prevSet) {\n      var temp = new Set(prevSet);\n      temp[\"delete\"](key);\n      return temp;\n    });\n  };\n  var reset = function reset() {\n    return setSet(getInitValue());\n  };\n  return [set, {\n    add: useMemoizedFn(add),\n    remove: useMemoizedFn(remove),\n    reset: useMemoizedFn(reset)\n  }];\n}\nexport default useSet;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}