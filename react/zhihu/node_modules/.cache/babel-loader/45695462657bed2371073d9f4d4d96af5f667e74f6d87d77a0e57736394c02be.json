{"ast":null,"code":"import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { MinusOutline, AddOutline } from 'antd-mobile-icons';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { bound } from '../../utils/bound';\nimport Input from '../input';\nimport Button from '../button';\nimport Big from 'big.js';\nimport { useConfig } from '../config-provider';\nconst classPrefix = `adm-stepper`;\nconst defaultProps = {\n  defaultValue: 0,\n  step: 1,\n  disabled: false,\n  allowEmpty: false\n};\nexport const Stepper = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    disabled,\n    step,\n    max,\n    min,\n    inputReadOnly\n  } = props;\n  const {\n    locale\n  } = useConfig();\n  const [value, setValue] = usePropsValue(props);\n  const [inputValue, setInputValue] = useState(() => convertValueToText(value, props.digits));\n  function setValueWithCheck(v) {\n    if (isNaN(v)) return;\n    let target = bound(v, props.min, props.max);\n    if (props.digits !== undefined) {\n      target = parseFloat(target.toFixed(props.digits));\n    }\n    setValue(target);\n  }\n  const [hasFocus, setHasFocus] = useState(false);\n  useEffect(() => {\n    if (!hasFocus) {\n      setInputValue(convertValueToText(value, props.digits));\n    }\n  }, [hasFocus]);\n  useEffect(() => {\n    if (!hasFocus) {\n      setInputValue(convertValueToText(value, props.digits));\n    }\n  }, [value, props.digits]);\n  const handleInputChange = v => {\n    setInputValue(v);\n    const value = convertTextToValue(v);\n    if (value === null) {\n      if (props.allowEmpty) {\n        setValue(null);\n      } else {\n        setValue(props.defaultValue);\n      }\n    } else {\n      setValueWithCheck(value);\n    }\n  };\n  const handleMinus = () => {\n    setValueWithCheck(Big(value !== null && value !== void 0 ? value : 0).minus(step).toNumber());\n  };\n  const handlePlus = () => {\n    setValueWithCheck(Big(value !== null && value !== void 0 ? value : 0).add(step).toNumber());\n  };\n  const minusDisabled = () => {\n    if (disabled) return true;\n    if (value === null) return false;\n    if (min !== undefined) {\n      return value <= min;\n    }\n    return false;\n  };\n  const plusDisabled = () => {\n    if (disabled) return true;\n    if (value === null) return false;\n    if (max !== undefined) {\n      return value >= max;\n    }\n    return false;\n  };\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, {\n      [`${classPrefix}-active`]: hasFocus\n    })\n  }, React.createElement(Button, {\n    className: `${classPrefix}-minus`,\n    onClick: handleMinus,\n    disabled: minusDisabled(),\n    fill: 'none',\n    shape: 'rectangular',\n    color: 'primary',\n    \"aria-label\": locale.Stepper.decrease\n  }, React.createElement(MinusOutline, null)), React.createElement(\"div\", {\n    className: `${classPrefix}-middle`\n  }, React.createElement(Input, {\n    className: `${classPrefix}-input`,\n    onFocus: e => {\n      var _a;\n      setHasFocus(true);\n      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    value: inputValue,\n    onChange: val => {\n      disabled || handleInputChange(val);\n    },\n    disabled: disabled,\n    onBlur: e => {\n      var _a;\n      setHasFocus(false);\n      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    readOnly: inputReadOnly,\n    role: 'spinbutton',\n    \"aria-valuenow\": Number(inputValue),\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    inputMode: 'decimal'\n  })), React.createElement(Button, {\n    className: `${classPrefix}-plus`,\n    onClick: handlePlus,\n    disabled: plusDisabled(),\n    fill: 'none',\n    shape: 'rectangular',\n    color: 'primary',\n    \"aria-label\": locale.Stepper.increase\n  }, React.createElement(AddOutline, null))));\n};\nfunction convertValueToText(value, digits) {\n  if (value === null) return '';\n  if (digits !== undefined) {\n    return value.toFixed(digits);\n  } else {\n    return value.toString();\n  }\n}\nfunction convertTextToValue(text) {\n  if (text === '') return null;\n  return parseFloat(text);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}