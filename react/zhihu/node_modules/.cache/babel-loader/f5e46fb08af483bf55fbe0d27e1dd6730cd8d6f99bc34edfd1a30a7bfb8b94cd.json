{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useRef, useState } from 'react';\nimport { getTargetElement } from '../utils/domTarget';\nimport useEffectWithTarget from '../utils/useEffectWithTarget';\nvar initRect = {\n  top: NaN,\n  left: NaN,\n  bottom: NaN,\n  right: NaN,\n  height: NaN,\n  width: NaN\n};\nvar initState = __assign({\n  text: ''\n}, initRect);\nfunction getRectFromSelection(selection) {\n  if (!selection) {\n    return initRect;\n  }\n  if (selection.rangeCount < 1) {\n    return initRect;\n  }\n  var range = selection.getRangeAt(0);\n  var _a = range.getBoundingClientRect(),\n    height = _a.height,\n    width = _a.width,\n    top = _a.top,\n    left = _a.left,\n    right = _a.right,\n    bottom = _a.bottom;\n  return {\n    height: height,\n    width: width,\n    top: top,\n    left: left,\n    right: right,\n    bottom: bottom\n  };\n}\nfunction useTextSelection(target) {\n  var _a = __read(useState(initState), 2),\n    state = _a[0],\n    setState = _a[1];\n  var stateRef = useRef(state);\n  stateRef.current = state;\n  useEffectWithTarget(function () {\n    var el = getTargetElement(target, document);\n    if (!el) {\n      return;\n    }\n    var mouseupHandler = function mouseupHandler() {\n      var selObj = null;\n      var text = '';\n      var rect = initRect;\n      if (!window.getSelection) return;\n      selObj = window.getSelection();\n      text = selObj ? selObj.toString() : '';\n      if (text) {\n        rect = getRectFromSelection(selObj);\n        setState(__assign(__assign(__assign({}, state), {\n          text: text\n        }), rect));\n      }\n    };\n    // 任意点击都需要清空之前的 range\n    var mousedownHandler = function mousedownHandler() {\n      if (!window.getSelection) return;\n      if (stateRef.current.text) {\n        setState(__assign({}, initState));\n      }\n      var selObj = window.getSelection();\n      if (!selObj) return;\n      selObj.removeAllRanges();\n    };\n    el.addEventListener('mouseup', mouseupHandler);\n    document.addEventListener('mousedown', mousedownHandler);\n    return function () {\n      el.removeEventListener('mouseup', mouseupHandler);\n      document.removeEventListener('mousedown', mousedownHandler);\n    };\n  }, [], target);\n  return state;\n}\nexport default useTextSelection;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}