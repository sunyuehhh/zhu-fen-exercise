{"ast":null,"code":"/**\n * 自己创建一个Iterator类，来实现ES6中的迭代器规范\n */\nclass Iterator {\n  constructor(assemble) {\n    this.assemble;\n  }\n}\nlet arr = [10, 20, 30];\n\n/**\n * 创建一个实例对象，其应该具备迭代器规范的要求\n * itor.next()  具备next方法，执行这个方法可以一次获取到数据结构中的每一个成员值\n * +done:是否迭代完毕\n * +value:当前获取的那个值\n * 符合以上两个特点的对象，我们称之为符合迭代器规范的对象！！\n */\nlet itor = new Iterator();\nconsole.log(itor.next()); //{done:false,value:10}\nconsole.log(itor.next()); //{done:false,value:20}\nconsole.log(itor.next()); //{done:false,value:30}\nconsole.log(itor.next()); //{done:true,value:undefined}","map":{"version":3,"names":["Iterator","constructor","assemble","arr","itor","console","log","next"],"sources":["D:/xuexishipin/exercise/zhu-fen-exercise/react/zhihu/src/demo.js"],"sourcesContent":["/**\n * 自己创建一个Iterator类，来实现ES6中的迭代器规范\n */\nclass Iterator{\n  constructor(assemble){\n    this.assemble\n\n\n  }\n\n\n\n}\n\n\n\nlet arr=[10,20,30]\n\n\n/**\n * 创建一个实例对象，其应该具备迭代器规范的要求\n * itor.next()  具备next方法，执行这个方法可以一次获取到数据结构中的每一个成员值\n * +done:是否迭代完毕\n * +value:当前获取的那个值\n * 符合以上两个特点的对象，我们称之为符合迭代器规范的对象！！\n */\nlet itor=new Iterator()\n\nconsole.log(itor.next())//{done:false,value:10}\nconsole.log(itor.next())//{done:false,value:20}\nconsole.log(itor.next())//{done:false,value:30}\nconsole.log(itor.next())//{done:true,value:undefined}"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,QAAQ;EACZC,WAAW,CAACC,QAAQ,EAAC;IACnB,IAAI,CAACA,QAAQ;EAGf;AAIF;AAIA,IAAIC,GAAG,GAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAC,IAAIJ,QAAQ,EAAE;AAEvBK,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,IAAI,EAAE,CAAC;AACxBF,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,IAAI,EAAE,CAAC;AACxBF,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,IAAI,EAAE,CAAC;AACxBF,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,IAAI,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}