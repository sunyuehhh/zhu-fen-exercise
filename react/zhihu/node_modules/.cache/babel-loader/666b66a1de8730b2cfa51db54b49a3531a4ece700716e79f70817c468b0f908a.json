{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nfunction useMap(initialValue) {\n  var getInitValue = function getInitValue() {\n    return initialValue === undefined ? new Map() : new Map(initialValue);\n  };\n  var _a = __read(useState(function () {\n      return getInitValue();\n    }), 2),\n    map = _a[0],\n    setMap = _a[1];\n  var set = function set(key, entry) {\n    setMap(function (prev) {\n      var temp = new Map(prev);\n      temp.set(key, entry);\n      return temp;\n    });\n  };\n  var setAll = function setAll(newMap) {\n    setMap(new Map(newMap));\n  };\n  var remove = function remove(key) {\n    setMap(function (prev) {\n      var temp = new Map(prev);\n      temp[\"delete\"](key);\n      return temp;\n    });\n  };\n  var reset = function reset() {\n    return setMap(getInitValue());\n  };\n  var get = function get(key) {\n    return map.get(key);\n  };\n  return [map, {\n    set: useMemoizedFn(set),\n    setAll: useMemoizedFn(setAll),\n    remove: useMemoizedFn(remove),\n    reset: useMemoizedFn(reset),\n    get: useMemoizedFn(get)\n  }];\n}\nexport default useMap;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}