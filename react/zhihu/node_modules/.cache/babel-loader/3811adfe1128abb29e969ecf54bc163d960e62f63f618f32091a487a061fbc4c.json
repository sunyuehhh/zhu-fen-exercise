{"ast":null,"code":"/**\n * 如何创建一个Generator生成器函数?\n * + 把创建函数的\"function\"后面加一个\"*\"即可\n * + 箭头函数是无法变为生成器函数的\n * \n * \n * 每一个生成器函数，都是GeneratorFunction这个类的实例\n * fn.__proto__ ->GeneratorFunction.prototype -> Function.prototype\n * 多了这样的一个私有属性  [[IsGenerator]]:true\n *\n * 普通函数的原型链\n * fn.__proto__->Function.prototype\n * \n * 当生成器函数执行：\n *   首先并不会立即把函数体中的代码执行\n *   而是返回一个具备迭代器规范的对象[]\n */\nconst sum = () => {};\nconst fn = function* fn() {\n  console.log('代码运行中:', 10);\n  return 100;\n};\nconsole.log('运行结束:', fn());","map":{"version":3,"names":["sum","fn","console","log"],"sources":["D:/xuexishipin/exercise/zhu-fen-exercise/react/zhihu/src/demo.js"],"sourcesContent":["/**\n * 如何创建一个Generator生成器函数?\n * + 把创建函数的\"function\"后面加一个\"*\"即可\n * + 箭头函数是无法变为生成器函数的\n * \n * \n * 每一个生成器函数，都是GeneratorFunction这个类的实例\n * fn.__proto__ ->GeneratorFunction.prototype -> Function.prototype\n * 多了这样的一个私有属性  [[IsGenerator]]:true\n *\n * 普通函数的原型链\n * fn.__proto__->Function.prototype\n * \n * 当生成器函数执行：\n *   首先并不会立即把函数体中的代码执行\n *   而是返回一个具备迭代器规范的对象[]\n */\nconst sum=()=>{\n\n}\nconst fn=function* fn(){\n  console.log('代码运行中:',10)\n  return 100\n}\n\nconsole.log('运行结束:',fn())"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAG,GAAC,MAAI,CAEd,CAAC;AACD,MAAMC,EAAE,GAAC,UAAUA,EAAE,GAAE;EACrBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAC,EAAE,CAAC;EACxB,OAAO,GAAG;AACZ,CAAC;AAEDD,OAAO,CAACC,GAAG,CAAC,OAAO,EAACF,EAAE,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}