{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport { isFunction } from '../utils';\nimport isDev from '../utils/isDev';\nfunction useMemoizedFn(fn) {\n  if (isDev) {\n    if (!isFunction(fn)) {\n      console.error(\"useMemoizedFn expected parameter is a function, got \".concat(typeof fn));\n    }\n  }\n  var fnRef = useRef(fn);\n  // why not write `fnRef.current = fn`?\n  // https://github.com/alibaba/hooks/issues/728\n  fnRef.current = useMemo(function () {\n    return fn;\n  }, [fn]);\n  var memoizedFn = useRef();\n  if (!memoizedFn.current) {\n    memoizedFn.current = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return fnRef.current.apply(this, args);\n    };\n  }\n  return memoizedFn.current;\n}\nexport default useMemoizedFn;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}