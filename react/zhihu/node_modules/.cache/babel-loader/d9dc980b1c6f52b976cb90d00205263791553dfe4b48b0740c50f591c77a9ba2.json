{"ast":null,"code":"'use strict';\n\nconst HIGH_SURROGATE_START = 0xd800;\nconst HIGH_SURROGATE_END = 0xdbff;\nconst LOW_SURROGATE_START = 0xdc00;\nconst REGIONAL_INDICATOR_START = 0x1f1e6;\nconst REGIONAL_INDICATOR_END = 0x1f1ff;\nconst FITZPATRICK_MODIFIER_START = 0x1f3fb;\nconst FITZPATRICK_MODIFIER_END = 0x1f3ff;\nconst VARIATION_MODIFIER_START = 0xfe00;\nconst VARIATION_MODIFIER_END = 0xfe0f;\nconst DIACRITICAL_MARKS_START = 0x20d0;\nconst DIACRITICAL_MARKS_END = 0x20ff;\nconst ZWJ = 0x200d;\nconst GRAPHEMS = [0x0308,\n// ( ◌̈ ) COMBINING DIAERESIS\n0x0937,\n// ( ष ) DEVANAGARI LETTER SSA\n0x0937,\n// ( ष ) DEVANAGARI LETTER SSA\n0x093F,\n// ( ि ) DEVANAGARI VOWEL SIGN I\n0x093F,\n// ( ि ) DEVANAGARI VOWEL SIGN I\n0x0BA8,\n// ( ந ) TAMIL LETTER NA\n0x0BBF,\n// ( ி ) TAMIL VOWEL SIGN I\n0x0BCD,\n// ( ◌்) TAMIL SIGN VIRAMA\n0x0E31,\n// ( ◌ั ) THAI CHARACTER MAI HAN-AKAT\n0x0E33,\n// ( ำ ) THAI CHARACTER SARA AM\n0x0E40,\n// ( เ ) THAI CHARACTER SARA E\n0x0E49,\n// ( เ ) THAI CHARACTER MAI THO\n0x1100,\n// ( ᄀ ) HANGUL CHOSEONG KIYEOK\n0x1161,\n// ( ᅡ ) HANGUL JUNGSEONG A\n0x11A8 // ( ᆨ ) HANGUL JONGSEONG KIYEOK\n];\n\nfunction runes(string) {\n  if (typeof string !== 'string') {\n    throw new Error('string cannot be undefined or null');\n  }\n  const result = [];\n  let i = 0;\n  let increment = 0;\n  while (i < string.length) {\n    increment += nextUnits(i + increment, string);\n    if (isGraphem(string[i + increment])) {\n      increment++;\n    }\n    if (isVariationSelector(string[i + increment])) {\n      increment++;\n    }\n    if (isDiacriticalMark(string[i + increment])) {\n      increment++;\n    }\n    if (isZeroWidthJoiner(string[i + increment])) {\n      increment++;\n      continue;\n    }\n    result.push(string.substring(i, i + increment));\n    i += increment;\n    increment = 0;\n  }\n  return result;\n}\n\n// Decide how many code units make up the current character.\n// BMP characters: 1 code unit\n// Non-BMP characters (represented by surrogate pairs): 2 code units\n// Emoji with skin-tone modifiers: 4 code units (2 code points)\n// Country flags: 4 code units (2 code points)\n// Variations: 2 code units\nfunction nextUnits(i, string) {\n  const current = string[i];\n  // If we don't have a value that is part of a surrogate pair, or we're at\n  // the end, only take the value at i\n  if (!isFirstOfSurrogatePair(current) || i === string.length - 1) {\n    return 1;\n  }\n  const currentPair = current + string[i + 1];\n  let nextPair = string.substring(i + 2, i + 5);\n\n  // Country flags are comprised of two regional indicator symbols,\n  // each represented by a surrogate pair.\n  // See http://emojipedia.org/flags/\n  // If both pairs are regional indicator symbols, take 4\n  if (isRegionalIndicator(currentPair) && isRegionalIndicator(nextPair)) {\n    return 4;\n  }\n\n  // If the next pair make a Fitzpatrick skin tone\n  // modifier, take 4\n  // See http://emojipedia.org/modifiers/\n  // Technically, only some code points are meant to be\n  // combined with the skin tone modifiers. This function\n  // does not check the current pair to see if it is\n  // one of them.\n  if (isFitzpatrickModifier(nextPair)) {\n    return 4;\n  }\n  return 2;\n}\nfunction isFirstOfSurrogatePair(string) {\n  return string && betweenInclusive(string[0].charCodeAt(0), HIGH_SURROGATE_START, HIGH_SURROGATE_END);\n}\nfunction isRegionalIndicator(string) {\n  return betweenInclusive(codePointFromSurrogatePair(string), REGIONAL_INDICATOR_START, REGIONAL_INDICATOR_END);\n}\nfunction isFitzpatrickModifier(string) {\n  return betweenInclusive(codePointFromSurrogatePair(string), FITZPATRICK_MODIFIER_START, FITZPATRICK_MODIFIER_END);\n}\nfunction isVariationSelector(string) {\n  return typeof string === 'string' && betweenInclusive(string.charCodeAt(0), VARIATION_MODIFIER_START, VARIATION_MODIFIER_END);\n}\nfunction isDiacriticalMark(string) {\n  return typeof string === 'string' && betweenInclusive(string.charCodeAt(0), DIACRITICAL_MARKS_START, DIACRITICAL_MARKS_END);\n}\nfunction isGraphem(string) {\n  return typeof string === 'string' && GRAPHEMS.indexOf(string.charCodeAt(0)) !== -1;\n}\nfunction isZeroWidthJoiner(string) {\n  return typeof string === 'string' && string.charCodeAt(0) === ZWJ;\n}\nfunction codePointFromSurrogatePair(pair) {\n  const highOffset = pair.charCodeAt(0) - HIGH_SURROGATE_START;\n  const lowOffset = pair.charCodeAt(1) - LOW_SURROGATE_START;\n  return (highOffset << 10) + lowOffset + 0x10000;\n}\nfunction betweenInclusive(value, lower, upper) {\n  return value >= lower && value <= upper;\n}\nfunction substring(string, start, width) {\n  const chars = runes(string);\n  if (start === undefined) {\n    return string;\n  }\n  if (start >= chars.length) {\n    return '';\n  }\n  const rest = chars.length - start;\n  const stringWidth = width === undefined ? rest : width;\n  let endIndex = start + stringWidth;\n  if (endIndex > start + rest) {\n    endIndex = undefined;\n  }\n  return chars.slice(start, endIndex).join('');\n}\nmodule.exports = runes;\nmodule.exports.substr = substring;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}