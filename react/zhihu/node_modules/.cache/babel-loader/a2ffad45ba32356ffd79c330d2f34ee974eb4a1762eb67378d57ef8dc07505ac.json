{"ast":null,"code":"/**\n * 自己创建一个Iterator类，来实现ES6中的迭代器规范\n */\nclass Iterator {\n  constructor(assemble) {\n    // assemble:需要迭代的数据结构\n    this.assemble = assemble;\n\n    // index:记录迭代的次数(或者索引)\n    this.index = -1;\n  }\n\n  // 必须具备的next方法\n  next() {\n    let {\n      assemble,\n      index\n    } = this;\n    this.index++;\n    if (index >= assemble.length) {\n      // 迭代完毕\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n    return {\n      done: false,\n      value: assemble[index]\n    };\n  }\n}\n\n/**\n * 创建一个实例对象，其应该具备迭代器规范的要求\n * itor.next()  具备next方法，执行这个方法可以一次获取到数据结构中的每一个成员值\n * +done:是否迭代完毕\n * +value:当前获取的那个值\n * 符合以上两个特点的对象，我们称之为符合迭代器规范的对象！！\n */\nlet itor = new Iterator([10, 20, 30]);\nconsole.log(itor.next()); //{done:false,value:10}\nconsole.log(itor.next()); //{done:false,value:20}\nconsole.log(itor.next()); //{done:false,value:30}\nconsole.log(itor.next()); //{done:true,value:undefined}\n\n// ===================================\n/**\n * 在JS中，有很多数据结构，天生具备迭代器规范的，例如\n *    我们主要看数据结构(对象)是否具备  Symbol.iterator这个属性的，\n */","map":{"version":3,"names":["Iterator","constructor","assemble","index","next","length","done","value","undefined","itor","console","log"],"sources":["D:/xuexishipin/exercise/zhu-fen-exercise/react/zhihu/src/demo.js"],"sourcesContent":["/**\n * 自己创建一个Iterator类，来实现ES6中的迭代器规范\n */\nclass Iterator{\n  constructor(assemble){\n    // assemble:需要迭代的数据结构\n    this.assemble=assemble\n\n    // index:记录迭代的次数(或者索引)\n    this.index=-1\n  }\n\n  // 必须具备的next方法\n  next(){\n    let {assemble,index}=this;\n    this.index++;\n\n    if(index>=assemble.length){\n      // 迭代完毕\n      return {\n        done:true,\n        value:undefined\n      }\n    }\n    return {\n      done:false,\n      value:assemble[index]\n    }\n  }\n}\n\n\n\n\n/**\n * 创建一个实例对象，其应该具备迭代器规范的要求\n * itor.next()  具备next方法，执行这个方法可以一次获取到数据结构中的每一个成员值\n * +done:是否迭代完毕\n * +value:当前获取的那个值\n * 符合以上两个特点的对象，我们称之为符合迭代器规范的对象！！\n */\nlet itor=new Iterator([10,20,30])\n\nconsole.log(itor.next())//{done:false,value:10}\nconsole.log(itor.next())//{done:false,value:20}\nconsole.log(itor.next())//{done:false,value:30}\nconsole.log(itor.next())//{done:true,value:undefined}\n\n\n// ===================================\n/**\n * 在JS中，有很多数据结构，天生具备迭代器规范的，例如\n *    我们主要看数据结构(对象)是否具备  Symbol.iterator这个属性的，\n */\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,QAAQ;EACZC,WAAW,CAACC,QAAQ,EAAC;IACnB;IACA,IAAI,CAACA,QAAQ,GAACA,QAAQ;;IAEtB;IACA,IAAI,CAACC,KAAK,GAAC,CAAC,CAAC;EACf;;EAEA;EACAC,IAAI,GAAE;IACJ,IAAI;MAACF,QAAQ;MAACC;IAAK,CAAC,GAAC,IAAI;IACzB,IAAI,CAACA,KAAK,EAAE;IAEZ,IAAGA,KAAK,IAAED,QAAQ,CAACG,MAAM,EAAC;MACxB;MACA,OAAO;QACLC,IAAI,EAAC,IAAI;QACTC,KAAK,EAACC;MACR,CAAC;IACH;IACA,OAAO;MACLF,IAAI,EAAC,KAAK;MACVC,KAAK,EAACL,QAAQ,CAACC,KAAK;IACtB,CAAC;EACH;AACF;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,IAAI,GAAC,IAAIT,QAAQ,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;AAEjCU,OAAO,CAACC,GAAG,CAACF,IAAI,CAACL,IAAI,EAAE,CAAC;AACxBM,OAAO,CAACC,GAAG,CAACF,IAAI,CAACL,IAAI,EAAE,CAAC;AACxBM,OAAO,CAACC,GAAG,CAACF,IAAI,CAACL,IAAI,EAAE,CAAC;AACxBM,OAAO,CAACC,GAAG,CAACF,IAAI,CAACL,IAAI,EAAE,CAAC;;AAGxB;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}