{"ast":null,"code":"import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { renderToBody } from './render-to-body';\nexport function renderImperatively(element) {\n  const Wrapper = React.forwardRef((_, ref) => {\n    const [visible, setVisible] = useState(false);\n    const closedRef = useRef(false);\n    const [elementToRender, setElementToRender] = useState(element);\n    const keyRef = useRef(0);\n    useEffect(() => {\n      if (!closedRef.current) {\n        setVisible(true);\n      } else {\n        afterClose();\n      }\n    }, []);\n    function onClose() {\n      var _a, _b;\n      closedRef.current = true;\n      setVisible(false);\n      (_b = (_a = elementToRender.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    function afterClose() {\n      var _a, _b;\n      unmount();\n      (_b = (_a = elementToRender.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    useImperativeHandle(ref, () => ({\n      close: onClose,\n      replace: element => {\n        var _a, _b;\n        keyRef.current++;\n        (_b = (_a = elementToRender.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n        setElementToRender(element);\n      }\n    }));\n    return React.cloneElement(elementToRender, Object.assign(Object.assign({}, elementToRender.props), {\n      key: keyRef.current,\n      visible,\n      onClose,\n      afterClose\n    }));\n  });\n  const wrapperRef = React.createRef();\n  const unmount = renderToBody(React.createElement(Wrapper, {\n    ref: wrapperRef\n  }));\n  return {\n    close: () => {\n      var _a;\n      (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.close();\n    },\n    replace: element => {\n      var _a;\n      (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.replace(element);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}