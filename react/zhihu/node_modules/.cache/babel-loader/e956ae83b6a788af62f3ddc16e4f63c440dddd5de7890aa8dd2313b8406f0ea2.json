{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport useBoolean from '../useBoolean';\nimport useEventListener from '../useEventListener';\nexport default (function (target, options) {\n  var _a = options || {},\n    onEnter = _a.onEnter,\n    onLeave = _a.onLeave,\n    onChange = _a.onChange;\n  var _b = __read(useBoolean(false), 2),\n    state = _b[0],\n    _c = _b[1],\n    setTrue = _c.setTrue,\n    setFalse = _c.setFalse;\n  useEventListener('mouseenter', function () {\n    onEnter === null || onEnter === void 0 ? void 0 : onEnter();\n    setTrue();\n    onChange === null || onChange === void 0 ? void 0 : onChange(true);\n  }, {\n    target: target\n  });\n  useEventListener('mouseleave', function () {\n    onLeave === null || onLeave === void 0 ? void 0 : onLeave();\n    setFalse();\n    onChange === null || onChange === void 0 ? void 0 : onChange(false);\n  }, {\n    target: target\n  });\n  return state;\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}