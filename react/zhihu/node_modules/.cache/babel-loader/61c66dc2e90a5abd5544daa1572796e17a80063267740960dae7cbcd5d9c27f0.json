{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useEffect, useMemo, useState, useRef } from 'react';\nimport useEventListener from '../useEventListener';\nimport useLatest from '../useLatest';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useSize from '../useSize';\nimport { getTargetElement } from '../utils/domTarget';\nimport { isNumber } from '../utils';\nvar useVirtualList = function useVirtualList(list, options) {\n  var containerTarget = options.containerTarget,\n    wrapperTarget = options.wrapperTarget,\n    itemHeight = options.itemHeight,\n    _a = options.overscan,\n    overscan = _a === void 0 ? 5 : _a;\n  var itemHeightRef = useLatest(itemHeight);\n  var size = useSize(containerTarget);\n  var scrollTriggerByScrollToFunc = useRef(false);\n  var _b = __read(useState([]), 2),\n    targetList = _b[0],\n    setTargetList = _b[1];\n  var getVisibleCount = function getVisibleCount(containerHeight, fromIndex) {\n    if (isNumber(itemHeightRef.current)) {\n      return Math.ceil(containerHeight / itemHeightRef.current);\n    }\n    var sum = 0;\n    var endIndex = 0;\n    for (var i = fromIndex; i < list.length; i++) {\n      var height = itemHeightRef.current(i, list[i]);\n      sum += height;\n      endIndex = i;\n      if (sum >= containerHeight) {\n        break;\n      }\n    }\n    return endIndex - fromIndex;\n  };\n  var getOffset = function getOffset(scrollTop) {\n    if (isNumber(itemHeightRef.current)) {\n      return Math.floor(scrollTop / itemHeightRef.current) + 1;\n    }\n    var sum = 0;\n    var offset = 0;\n    for (var i = 0; i < list.length; i++) {\n      var height = itemHeightRef.current(i, list[i]);\n      sum += height;\n      if (sum >= scrollTop) {\n        offset = i;\n        break;\n      }\n    }\n    return offset + 1;\n  };\n  // 获取上部高度\n  var getDistanceTop = function getDistanceTop(index) {\n    if (isNumber(itemHeightRef.current)) {\n      var height_1 = index * itemHeightRef.current;\n      return height_1;\n    }\n    var height = list.slice(0, index).reduce(function (sum, _, i) {\n      return sum + itemHeightRef.current(i, list[i]);\n    }, 0);\n    return height;\n  };\n  var totalHeight = useMemo(function () {\n    if (isNumber(itemHeightRef.current)) {\n      return list.length * itemHeightRef.current;\n    }\n    return list.reduce(function (sum, _, index) {\n      return sum + itemHeightRef.current(index, list[index]);\n    }, 0);\n  }, [list]);\n  var calculateRange = function calculateRange() {\n    var container = getTargetElement(containerTarget);\n    var wrapper = getTargetElement(wrapperTarget);\n    if (container && wrapper) {\n      var scrollTop = container.scrollTop,\n        clientHeight = container.clientHeight;\n      var offset = getOffset(scrollTop);\n      var visibleCount = getVisibleCount(clientHeight, offset);\n      var start_1 = Math.max(0, offset - overscan);\n      var end = Math.min(list.length, offset + visibleCount + overscan);\n      var offsetTop = getDistanceTop(start_1);\n      wrapper.style.height = totalHeight - offsetTop + 'px';\n      wrapper.style.marginTop = offsetTop + 'px';\n      setTargetList(list.slice(start_1, end).map(function (ele, index) {\n        return {\n          data: ele,\n          index: index + start_1\n        };\n      }));\n    }\n  };\n  useEffect(function () {\n    if (!(size === null || size === void 0 ? void 0 : size.width) || !(size === null || size === void 0 ? void 0 : size.height)) {\n      return;\n    }\n    calculateRange();\n  }, [size === null || size === void 0 ? void 0 : size.width, size === null || size === void 0 ? void 0 : size.height, list]);\n  useEventListener('scroll', function (e) {\n    if (scrollTriggerByScrollToFunc.current) {\n      scrollTriggerByScrollToFunc.current = false;\n      return;\n    }\n    e.preventDefault();\n    calculateRange();\n  }, {\n    target: containerTarget\n  });\n  var scrollTo = function scrollTo(index) {\n    var container = getTargetElement(containerTarget);\n    if (container) {\n      scrollTriggerByScrollToFunc.current = true;\n      container.scrollTop = getDistanceTop(index);\n      calculateRange();\n    }\n  };\n  return [targetList, useMemoizedFn(scrollTo)];\n};\nexport default useVirtualList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}