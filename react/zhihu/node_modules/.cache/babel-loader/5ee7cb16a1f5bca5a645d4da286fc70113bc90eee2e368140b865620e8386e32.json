{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect, useRef, useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nimport usePagination from '../usePagination';\nimport useUpdateEffect from '../useUpdateEffect';\nvar useAntdTable = function useAntdTable(service, options) {\n  var _a;\n  if (options === void 0) {\n    options = {};\n  }\n  var form = options.form,\n    _b = options.defaultType,\n    defaultType = _b === void 0 ? 'simple' : _b,\n    defaultParams = options.defaultParams,\n    _c = options.manual,\n    manual = _c === void 0 ? false : _c,\n    _d = options.refreshDeps,\n    refreshDeps = _d === void 0 ? [] : _d,\n    _e = options.ready,\n    ready = _e === void 0 ? true : _e,\n    rest = __rest(options, [\"form\", \"defaultType\", \"defaultParams\", \"manual\", \"refreshDeps\", \"ready\"]);\n  var result = usePagination(service, __assign({\n    manual: true\n  }, rest));\n  var _f = result.params,\n    params = _f === void 0 ? [] : _f,\n    run = result.run;\n  var cacheFormTableData = params[2] || {};\n  var _g = __read(useState((cacheFormTableData === null || cacheFormTableData === void 0 ? void 0 : cacheFormTableData.type) || defaultType), 2),\n    type = _g[0],\n    setType = _g[1];\n  var allFormDataRef = useRef({});\n  var defaultDataSourceRef = useRef([]);\n  var isAntdV4 = !!(form === null || form === void 0 ? void 0 : form.getInternalHooks);\n  // get current active field values\n  var getActiveFieldValues = function getActiveFieldValues() {\n    if (!form) {\n      return {};\n    }\n    // antd 4\n    if (isAntdV4) {\n      return form.getFieldsValue(null, function () {\n        return true;\n      });\n    }\n    // antd 3\n    var allFieldsValue = form.getFieldsValue();\n    var activeFieldsValue = {};\n    Object.keys(allFieldsValue).forEach(function (key) {\n      if (form.getFieldInstance ? form.getFieldInstance(key) : true) {\n        activeFieldsValue[key] = allFieldsValue[key];\n      }\n    });\n    return activeFieldsValue;\n  };\n  var validateFields = function validateFields() {\n    if (!form) {\n      return Promise.resolve({});\n    }\n    var activeFieldsValue = getActiveFieldValues();\n    var fields = Object.keys(activeFieldsValue);\n    // antd 4\n    if (isAntdV4) {\n      return form.validateFields(fields);\n    }\n    // antd 3\n    return new Promise(function (resolve, reject) {\n      form.validateFields(fields, function (errors, values) {\n        if (errors) {\n          reject(errors);\n        } else {\n          resolve(values);\n        }\n      });\n    });\n  };\n  var restoreForm = function restoreForm() {\n    if (!form) {\n      return;\n    }\n    // antd v4\n    if (isAntdV4) {\n      return form.setFieldsValue(allFormDataRef.current);\n    }\n    // antd v3\n    var activeFieldsValue = {};\n    Object.keys(allFormDataRef.current).forEach(function (key) {\n      if (form.getFieldInstance ? form.getFieldInstance(key) : true) {\n        activeFieldsValue[key] = allFormDataRef.current[key];\n      }\n    });\n    form.setFieldsValue(activeFieldsValue);\n  };\n  var changeType = function changeType() {\n    var activeFieldsValue = getActiveFieldValues();\n    allFormDataRef.current = __assign(__assign({}, allFormDataRef.current), activeFieldsValue);\n    setType(function (t) {\n      return t === 'simple' ? 'advance' : 'simple';\n    });\n  };\n  var _submit = function _submit(initPagination) {\n    if (!ready) {\n      return;\n    }\n    setTimeout(function () {\n      validateFields().then(function (values) {\n        if (values === void 0) {\n          values = {};\n        }\n        var pagination = initPagination || __assign(__assign({\n          pageSize: options.defaultPageSize || 10\n        }, (params === null || params === void 0 ? void 0 : params[0]) || {}), {\n          current: 1\n        });\n        if (!form) {\n          // @ts-ignore\n          run(pagination);\n          return;\n        }\n        // record all form data\n        allFormDataRef.current = __assign(__assign({}, allFormDataRef.current), values);\n        // @ts-ignore\n        run(pagination, values, {\n          allFormData: allFormDataRef.current,\n          type: type\n        });\n      })[\"catch\"](function (err) {\n        return err;\n      });\n    });\n  };\n  var reset = function reset() {\n    if (form) {\n      form.resetFields();\n    }\n    _submit();\n  };\n  var submit = function submit(e) {\n    var _a;\n    (_a = e === null || e === void 0 ? void 0 : e.preventDefault) === null || _a === void 0 ? void 0 : _a.call(e);\n    _submit();\n  };\n  var onTableChange = function onTableChange(pagination, filters, sorter) {\n    var _a = __read(params || []),\n      oldPaginationParams = _a[0],\n      restParams = _a.slice(1);\n    run.apply(void 0, __spreadArray([__assign(__assign({}, oldPaginationParams), {\n      current: pagination.current,\n      pageSize: pagination.pageSize,\n      filters: filters,\n      sorter: sorter\n    })], __read(restParams), false));\n  };\n  // init\n  useEffect(function () {\n    // if has cache, use cached params. ignore manual and ready.\n    if (params.length > 0) {\n      allFormDataRef.current = (cacheFormTableData === null || cacheFormTableData === void 0 ? void 0 : cacheFormTableData.allFormData) || {};\n      restoreForm();\n      // @ts-ignore\n      run.apply(void 0, __spreadArray([], __read(params), false));\n      return;\n    }\n    if (!manual && ready) {\n      allFormDataRef.current = (defaultParams === null || defaultParams === void 0 ? void 0 : defaultParams[1]) || {};\n      restoreForm();\n      _submit(defaultParams === null || defaultParams === void 0 ? void 0 : defaultParams[0]);\n    }\n  }, []);\n  // change search type, restore form data\n  useUpdateEffect(function () {\n    if (!ready) {\n      return;\n    }\n    restoreForm();\n  }, [type]);\n  // refresh & ready change on the same time\n  var hasAutoRun = useRef(false);\n  hasAutoRun.current = false;\n  useUpdateEffect(function () {\n    if (!manual && ready) {\n      hasAutoRun.current = true;\n      if (form) {\n        form.resetFields();\n      }\n      allFormDataRef.current = (defaultParams === null || defaultParams === void 0 ? void 0 : defaultParams[1]) || {};\n      restoreForm();\n      _submit(defaultParams === null || defaultParams === void 0 ? void 0 : defaultParams[0]);\n    }\n  }, [ready]);\n  useUpdateEffect(function () {\n    if (hasAutoRun.current) {\n      return;\n    }\n    if (!ready) {\n      return;\n    }\n    if (!manual) {\n      hasAutoRun.current = true;\n      result.pagination.changeCurrent(1);\n    }\n  }, __spreadArray([], __read(refreshDeps), false));\n  return __assign(__assign({}, result), {\n    tableProps: {\n      dataSource: ((_a = result.data) === null || _a === void 0 ? void 0 : _a.list) || defaultDataSourceRef.current,\n      loading: result.loading,\n      onChange: useMemoizedFn(onTableChange),\n      pagination: {\n        current: result.pagination.current,\n        pageSize: result.pagination.pageSize,\n        total: result.pagination.total\n      }\n    },\n    search: {\n      submit: useMemoizedFn(submit),\n      type: type,\n      changeType: useMemoizedFn(changeType),\n      reset: useMemoizedFn(reset)\n    }\n  });\n};\nexport default useAntdTable;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}