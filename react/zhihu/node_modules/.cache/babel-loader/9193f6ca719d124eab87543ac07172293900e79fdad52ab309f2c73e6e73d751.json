{"ast":null,"code":"const delay = function () {\n  let interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(`@@${interval}`);\n    }, interval);\n  });\n};\n\n// // 需求:串行请求，有三个请求[请求需要的时间分别是1000/2000/3000]?\n// delay(1000).then(value=>{\n//   console.log('第一个请求成功',value)\n\n//   return delay(2000)\n// }).then(value=>{\n//   console.log('第二个请求成功',value)\n\n//   return delay(3000)\n// }).then(value=>{\n//   console.log('第三个执行成功',value)\n// }).catch(reason=>{\n//   console.log('仍和请求失败,都执行这里')\n// })\n\n// (async ()=>{\n//   try {\n//     let value=await delay(1000)\n//     console.log(value,'第一个请求成功')\n\n//     let value2=await delay(2000)\n//     console.log(value2,'第2个请求成功')\n\n//     let value3=await delay(3000)\n//     console.log(value3,'第3个请求成功')\n\n//   } catch (reason) {\n//     console.log('任何请求失败,都执行这里',reason)\n\n//   }\n// })()\n\nconst handle = function* handle() {\n  let value = yield delay(1000);\n  console.log(value, '第一个请求成功');\n  let value2 = yield delay(2000);\n  console.log(value2, '第2个请求成功');\n  let value3 = yield delay(3000);\n  console.log(value3, '第3个请求成功');\n};\n\n// let itor=handle()\n\nconst AsyncFunction = function AsyncFunction() {\n  let itor = handle(...arguments);\n  const next = x => {\n    let {\n      done,\n      value\n    } = itor.next(x);\n    if (done) return;\n    if (!(value instanceof Promise)) value = Promise.resolve(value);\n    value.then(x => {});\n  };\n  next();\n};\n_c = AsyncFunction;\nAsyncFunction();\n\n// let {done,value}=itor.next()\n// // done:是否执行完毕  value:获取的是每一次yield后面的值[Promise实例]\n// value.then(x=>{\n//   // x:第一个请求成功的结果\n//   console.log(x,'x')\n//   let {value,done}=itor.next(x)\n//   value.then(x=>{\n//     let {done,value}=itor.next(x)\n//     value.then(x=>{\n//       itor.next(x)\n//     })\n//   })\n// })\nvar _c;\n$RefreshReg$(_c, \"AsyncFunction\");","map":{"version":3,"names":["delay","interval","Promise","resolve","setTimeout","handle","value","console","log","value2","value3","AsyncFunction","itor","next","x","done","then"],"sources":["D:/xuexishipin/exercise/zhu-fen-exercise/react/zhihu/src/demo.js"],"sourcesContent":["const delay=(interval=1000)=>{\n  return new Promise(resolve=>{\n    setTimeout(()=>{\n      resolve(`@@${interval}`)\n    },interval)\n  })\n}\n\n\n// // 需求:串行请求，有三个请求[请求需要的时间分别是1000/2000/3000]?\n// delay(1000).then(value=>{\n//   console.log('第一个请求成功',value)\n\n//   return delay(2000)\n// }).then(value=>{\n//   console.log('第二个请求成功',value)\n\n//   return delay(3000)\n// }).then(value=>{\n//   console.log('第三个执行成功',value)\n// }).catch(reason=>{\n//   console.log('仍和请求失败,都执行这里')\n// })\n\n\n\n\n// (async ()=>{\n//   try {\n//     let value=await delay(1000)\n//     console.log(value,'第一个请求成功')\n\n//     let value2=await delay(2000)\n//     console.log(value2,'第2个请求成功')\n\n//     let value3=await delay(3000)\n//     console.log(value3,'第3个请求成功')\n    \n//   } catch (reason) {\n//     console.log('任何请求失败,都执行这里',reason)\n    \n//   }\n// })()\n\n\nconst handle=function* handle(){\n  let value=yield delay(1000)\n  console.log(value,'第一个请求成功')\n\n  let value2=yield delay(2000)\n  console.log(value2,'第2个请求成功')\n\n  let value3=yield delay(3000)\n  console.log(value3,'第3个请求成功')\n}\n\n// let itor=handle()\n\n\nconst AsyncFunction=function AsyncFunction(...params){\n  let itor=handle(...params)\n  const next=x=>{\n    let {done,value}=itor.next(x)\n    if(done) return \n    if(!(value instanceof Promise)) value=Promise.resolve(value);\n    value.then(x=>{\n      \n    })\n  }\n\n  next()\n\n}\n\nAsyncFunction()\n\n\n\n\n\n\n\n\n\n\n\n\n\n// let {done,value}=itor.next()\n// // done:是否执行完毕  value:获取的是每一次yield后面的值[Promise实例]\n// value.then(x=>{\n//   // x:第一个请求成功的结果\n//   console.log(x,'x')\n//   let {value,done}=itor.next(x)\n//   value.then(x=>{\n//     let {done,value}=itor.next(x)\n//     value.then(x=>{\n//       itor.next(x)\n//     })\n//   })\n// })\n\n\n"],"mappings":"AAAA,MAAMA,KAAK,GAAC,YAAiB;EAAA,IAAhBC,QAAQ,uEAAC,IAAI;EACxB,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAE;IAC1BC,UAAU,CAAC,MAAI;MACbD,OAAO,CAAE,KAAIF,QAAS,EAAC,CAAC;IAC1B,CAAC,EAACA,QAAQ,CAAC;EACb,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA,MAAMI,MAAM,GAAC,UAAUA,MAAM,GAAE;EAC7B,IAAIC,KAAK,GAAC,MAAMN,KAAK,CAAC,IAAI,CAAC;EAC3BO,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,SAAS,CAAC;EAE5B,IAAIG,MAAM,GAAC,MAAMT,KAAK,CAAC,IAAI,CAAC;EAC5BO,OAAO,CAACC,GAAG,CAACC,MAAM,EAAC,SAAS,CAAC;EAE7B,IAAIC,MAAM,GAAC,MAAMV,KAAK,CAAC,IAAI,CAAC;EAC5BO,OAAO,CAACC,GAAG,CAACE,MAAM,EAAC,SAAS,CAAC;AAC/B,CAAC;;AAED;;AAGA,MAAMC,aAAa,GAAC,SAASA,aAAa,GAAW;EACnD,IAAIC,IAAI,GAACP,MAAM,CAAC,YAAS,CAAC;EAC1B,MAAMQ,IAAI,GAACC,CAAC,IAAE;IACZ,IAAI;MAACC,IAAI;MAACT;IAAK,CAAC,GAACM,IAAI,CAACC,IAAI,CAACC,CAAC,CAAC;IAC7B,IAAGC,IAAI,EAAE;IACT,IAAG,EAAET,KAAK,YAAYJ,OAAO,CAAC,EAAEI,KAAK,GAACJ,OAAO,CAACC,OAAO,CAACG,KAAK,CAAC;IAC5DA,KAAK,CAACU,IAAI,CAACF,CAAC,IAAE,CAEd,CAAC,CAAC;EACJ,CAAC;EAEDD,IAAI,EAAE;AAER,CAAC;AAAA,KAbKF,aAAa;AAenBA,aAAa,EAAE;;AAcf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}