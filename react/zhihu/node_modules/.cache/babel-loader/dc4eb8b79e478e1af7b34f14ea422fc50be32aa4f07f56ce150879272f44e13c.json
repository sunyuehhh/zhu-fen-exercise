{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useRef, useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nimport { isNumber } from '../utils';\nvar dumpIndex = function dumpIndex(step, arr) {\n  var index = step > 0 ? step - 1 // move forward\n  : arr.length + step; // move backward\n  if (index >= arr.length - 1) {\n    index = arr.length - 1;\n  }\n  if (index < 0) {\n    index = 0;\n  }\n  return index;\n};\nvar split = function split(step, targetArr) {\n  var index = dumpIndex(step, targetArr);\n  return {\n    _current: targetArr[index],\n    _before: targetArr.slice(0, index),\n    _after: targetArr.slice(index + 1)\n  };\n};\nexport default function useHistoryTravel(initialValue, maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 0;\n  }\n  var _a = __read(useState({\n      present: initialValue,\n      past: [],\n      future: []\n    }), 2),\n    history = _a[0],\n    setHistory = _a[1];\n  var present = history.present,\n    past = history.past,\n    future = history.future;\n  var initialValueRef = useRef(initialValue);\n  var reset = function reset() {\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    var _initial = params.length > 0 ? params[0] : initialValueRef.current;\n    initialValueRef.current = _initial;\n    setHistory({\n      present: _initial,\n      future: [],\n      past: []\n    });\n  };\n  var updateValue = function updateValue(val) {\n    var _past = __spreadArray(__spreadArray([], __read(past), false), [present], false);\n    var maxLengthNum = isNumber(maxLength) ? maxLength : Number(maxLength);\n    // maximum number of records exceeded\n    if (maxLengthNum > 0 && _past.length > maxLengthNum) {\n      //delete first\n      _past.splice(0, 1);\n    }\n    setHistory({\n      present: val,\n      future: [],\n      past: _past\n    });\n  };\n  var _forward = function _forward(step) {\n    if (step === void 0) {\n      step = 1;\n    }\n    if (future.length === 0) {\n      return;\n    }\n    var _a = split(step, future),\n      _before = _a._before,\n      _current = _a._current,\n      _after = _a._after;\n    setHistory({\n      past: __spreadArray(__spreadArray(__spreadArray([], __read(past), false), [present], false), __read(_before), false),\n      present: _current,\n      future: _after\n    });\n  };\n  var _backward = function _backward(step) {\n    if (step === void 0) {\n      step = -1;\n    }\n    if (past.length === 0) {\n      return;\n    }\n    var _a = split(step, past),\n      _before = _a._before,\n      _current = _a._current,\n      _after = _a._after;\n    setHistory({\n      past: _before,\n      present: _current,\n      future: __spreadArray(__spreadArray(__spreadArray([], __read(_after), false), [present], false), __read(future), false)\n    });\n  };\n  var go = function go(step) {\n    var stepNum = isNumber(step) ? step : Number(step);\n    if (stepNum === 0) {\n      return;\n    }\n    if (stepNum > 0) {\n      return _forward(stepNum);\n    }\n    _backward(stepNum);\n  };\n  return {\n    value: present,\n    backLength: past.length,\n    forwardLength: future.length,\n    setValue: useMemoizedFn(updateValue),\n    go: useMemoizedFn(go),\n    back: useMemoizedFn(function () {\n      go(-1);\n    }),\n    forward: useMemoizedFn(function () {\n      go(1);\n    }),\n    reset: useMemoizedFn(reset)\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}