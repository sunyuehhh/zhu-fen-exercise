{"ast":null,"code":"import { useRef } from 'react';\nimport useCreation from '../useCreation';\nimport useUpdate from '../useUpdate';\nimport { isObject } from '../utils';\n// k:v 原对象:代理过的对象\nvar proxyMap = new WeakMap();\n// k:v 代理过的对象:原对象\nvar rawMap = new WeakMap();\nfunction observer(initialVal, cb) {\n  var existingProxy = proxyMap.get(initialVal);\n  // 添加缓存 防止重新构建proxy\n  if (existingProxy) {\n    return existingProxy;\n  }\n  // 防止代理已经代理过的对象\n  // https://github.com/alibaba/hooks/issues/839\n  if (rawMap.has(initialVal)) {\n    return initialVal;\n  }\n  var proxy = new Proxy(initialVal, {\n    get: function get(target, key, receiver) {\n      var res = Reflect.get(target, key, receiver);\n      return isObject(res) ? observer(res, cb) : Reflect.get(target, key);\n    },\n    set: function set(target, key, val) {\n      var ret = Reflect.set(target, key, val);\n      cb();\n      return ret;\n    },\n    deleteProperty: function deleteProperty(target, key) {\n      var ret = Reflect.deleteProperty(target, key);\n      cb();\n      return ret;\n    }\n  });\n  proxyMap.set(initialVal, proxy);\n  rawMap.set(proxy, initialVal);\n  return proxy;\n}\nfunction useReactive(initialState) {\n  var update = useUpdate();\n  var stateRef = useRef(initialState);\n  var state = useCreation(function () {\n    return observer(stateRef.current, function () {\n      update();\n    });\n  }, []);\n  return state;\n}\nexport default useReactive;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}